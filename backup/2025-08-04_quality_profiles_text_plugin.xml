<?xml version="1.0" encoding="UTF-8"?><profile><name>md_quality_profile</name><language>txt</language><rules><rule><repositoryKey>txt</repositoryKey><key>Cross_Database_Dependencies</key><type>CODE_SMELL</type><priority>CRITICAL</priority><impacts><impact><softwareQuality>MAINTAINABILITY</softwareQuality><severity>HIGH</severity></impact></impacts><name>Cross-Database Dependencies</name><templateKey>SimpleRegexMatchCheck</templateKey><description>This rule flags any line where the value of the CROSS_DB column is *cross_db_true*, indicating an invalid cross-database reference.</description><cleanCodeAttribute>MODULAR</cleanCodeAttribute><parameters><parameter><key>expression</key><value>^.*cross_db_true.*$</value></parameter></parameters></rule><rule><repositoryKey>txt</repositoryKey><key>Disallow_CREATE_SCHEMA_without_IF_NOT_EXISTS</key><type>CODE_SMELL</type><priority>MAJOR</priority><impacts><impact><softwareQuality>MAINTAINABILITY</softwareQuality><severity>MEDIUM</severity></impact></impacts><name>Disallow CREATE SCHEMA without IF NOT EXISTS or REPLACE</name><templateKey>SimpleRegexMatchCheck</templateKey><description>*Description:*
This rule ensures that all CREATE SCHEMA statements explicitly include the IF NOT EXISTS clause to avoid errors when the schema already exists. It enforces safe schema creation practices, particularly important in CI/CD pipelines and automated deployment scripts.

*Why This Matters:*
Using IF NOT EXISTS with CREATE SCHEMA prevents execution errors and avoids unnecessary failures when the schema is already present in the database. This contributes to idempotent and robust database deployment scripts.</description><cleanCodeAttribute>CONVENTIONAL</cleanCodeAttribute><parameters><parameter><key>expression</key><value>(?i)^\s*CREATE\s+(?!OR\s+REPLACE\b)(?!.*\bIF\s+NOT\s+EXISTS\b).*?\bSCHEMA\b</value></parameter></parameters></rule><rule><repositoryKey>txt</repositoryKey><key>Disallow_CREATE_TABLE_without_IF_NOT_EXISTS_or_REPLACE</key><type>CODE_SMELL</type><priority>MAJOR</priority><impacts><impact><softwareQuality>MAINTAINABILITY</softwareQuality><severity>MEDIUM</severity></impact></impacts><name>Disallow CREATE TABLE without IF NOT EXISTS or REPLACE</name><templateKey>SimpleRegexMatchCheck</templateKey><description>*Description:*
This rule ensures that all CREATE TABLE statements explicitly include the IF NOT EXISTS clause to avoid errors when the TABLE already exists. It enforces safe TABLE creation practices, particularly important in CI/CD pipelines and automated deployment scripts.

*Why This Matters:*
Using IF NOT EXISTS with CREATE TABLE prevents execution errors and avoids unnecessary failures when the TABLE is already present in the database. This contributes to idempotent and robust database deployment scripts.</description><cleanCodeAttribute>CONVENTIONAL</cleanCodeAttribute><parameters><parameter><key>expression</key><value>(?is)^(?!\s*--).*CREATE\s+(?!OR\s+REPLACE\b|.*IF\s+NOT\s+EXISTS\b).*TABLE\b</value></parameter></parameters></rule><rule><repositoryKey>txt</repositoryKey><key>Disallow_CREATE_statements_with_hardcoded_database_or_schema_prefix</key><type>CODE_SMELL</type><priority>MAJOR</priority><impacts><impact><softwareQuality>MAINTAINABILITY</softwareQuality><severity>MEDIUM</severity></impact></impacts><name>Disallow CREATE statements with hardcoded database and /or schema prefix</name><templateKey>SimpleRegexMatchCheck</templateKey><description>*Description*
Object creation statements (e.g., CREATE TABLE, CREATE VIEW, etc.) must not include a hardcoded database or schema name using dot notation.
Hardcoding schema or database names like tb_101.harmonized.orders_v reduces deployment flexibility and violates environment-agnostic scripting principles.

✅ Allowed:
* CREATE View IF NOT EXISTS orders_v;
* CREATE OR REPLACE TABLE RAW_sales_v001;

❌ Not Allowed:
* CREATE View IF NOT EXISTS tb_101.harmonized.orders_v;
* CREATE OR REPLACE TABLE harmonized.RAW_sales_v001;

Commented lines (starting with --) are ignored.</description><cleanCodeAttribute>CONVENTIONAL</cleanCodeAttribute><parameters><parameter><key>expression</key><value>(?i)^(?!\s*--)\s*create\s+(or\s+replace\s+)?(table|view|schema)\s+(if\s+not\s+exists\s+)?[a-z0-9_]+\.[a-z0-9_]+(\.[a-z0-9_]+)?</value></parameter></parameters></rule><rule><repositoryKey>txt</repositoryKey><key>Disallow_Cross_Schema_Dependencies</key><type>CODE_SMELL</type><priority>CRITICAL</priority><impacts><impact><softwareQuality>MAINTAINABILITY</softwareQuality><severity>HIGH</severity></impact></impacts><name>Disallow Cross-Schema Dependencies</name><templateKey>SimpleRegexMatchCheck</templateKey><description>This rule flags any line where the value of the CROSS_SCHEMA column is *cross_schema_true*, indicating an invalid cross-schema reference.</description><cleanCodeAttribute>MODULAR</cleanCodeAttribute><parameters><parameter><key>expression</key><value>^.*cross_schema_true.*$</value></parameter></parameters></rule><rule><repositoryKey>txt</repositoryKey><key>Disallow_GRANT_Statements_to_PUBLIC</key><type>VULNERABILITY</type><priority>CRITICAL</priority><impacts><impact><softwareQuality>SECURITY</softwareQuality><severity>HIGH</severity></impact></impacts><name>Disallow GRANT Statements to PUBLIC</name><templateKey>SimpleRegexMatchCheck</templateKey><description>*Rule Description*
Granting privileges to the ``PUBLIC`` role in Snowflake can unintentionally expose objects (such as tables, views, or functions) to all users in the account. This practice increases the risk of unauthorized data access and violates the principle of least privilege.

To maintain a secure and auditable permissions model, avoid using ``GRANT ... TO PUBLIC`` statements. Instead, assign privileges to specific roles or role hierarchies that are tightly controlled</description><cleanCodeAttribute>CONVENTIONAL</cleanCodeAttribute><parameters><parameter><key>expression</key><value>(?i)^(?!\s*--).*grant\s+.*\s+to\s+public\b</value></parameter></parameters></rule><rule><repositoryKey>txt</repositoryKey><key>Disallow_dropping_objects_without_IF_EXISTS</key><type>CODE_SMELL</type><priority>MAJOR</priority><impacts><impact><softwareQuality>MAINTAINABILITY</softwareQuality><severity>MEDIUM</severity></impact></impacts><name>Disallow dropping objects without IF EXISTS</name><templateKey>SimpleRegexMatchCheck</templateKey><description>*Description*
❌ Forbidden Pattern: DROP SCHEMA, DROP TABLE, or DROP VIEW statements must include the IF EXISTS clause to prevent errors when the object does not exist.
✅ Allowed Examples:
*DROP SCHEMA IF EXISTS my_schema;
*DROP TABLE IF EXISTS my_table;
*DROP VIEW IF EXISTS my_view;

❌ Disallowed Examples:
*DROP SCHEMA my_schema;
*DROP TABLE my_table;
*DROP VIEW my_view;

This rule enforces safer DDL operations, avoiding failures in deployment pipelines and scripts when objects are missing.</description><cleanCodeAttribute>CONVENTIONAL</cleanCodeAttribute><parameters><parameter><key>expression</key><value>(?i)^\s*DROP\s+(SCHEMA|TABLE|VIEW)\s+(?!IF\s+EXISTS\b)</value></parameter></parameters></rule><rule><repositoryKey>txt</repositoryKey><key>Disallow_hardcoded_USE_DATABASE__SCHEMA__or_ROLE_statements</key><type>CODE_SMELL</type><priority>CRITICAL</priority><impacts><impact><softwareQuality>MAINTAINABILITY</softwareQuality><severity>HIGH</severity></impact></impacts><name>Disallow hardcoded USE DATABASE, SCHEMA, or ROLE statements</name><templateKey>SimpleRegexMatchCheck</templateKey><description>Avoid using hardcoded USE DATABASE, USE SCHEMA, or USE ROLE statements in SQL scripts. These can cause environment-specific dependencies and reduce deployment portability. Use parameterized or environment-driven alternatives instead.
Lines starting with -- (comments) are ignored.</description><cleanCodeAttribute>CONVENTIONAL</cleanCodeAttribute><parameters><parameter><key>expression</key><value>(?i)^(?!\s*--)\s*USE\s+(DATABASE|SCHEMA|ROLE)\b</value></parameter></parameters></rule><rule><repositoryKey>txt</repositoryKey><key>Disallow_usage_of_TIMESTAMP_types_other_than_TIMESTAMP_TZ</key><type>CODE_SMELL</type><priority>CRITICAL</priority><impacts><impact><softwareQuality>MAINTAINABILITY</softwareQuality><severity>HIGH</severity></impact></impacts><name>Disallow usage of TIMESTAMP types other than TIMESTAMP_TZ</name><templateKey>SimpleRegexMatchCheck</templateKey><description>Only TIMESTAMP_TZ (with or without explicit precision, e.g., TIMESTAMP_TZ(9)) should be used for handling timestamps to ensure time zone consistency across environments.
Usage of TIMESTAMP, TIMESTAMP_NTZ, or TIMESTAMP_LTZ is discouraged because they may lead to ambiguity in time zone interpretation.</description><cleanCodeAttribute>CONVENTIONAL</cleanCodeAttribute><parameters><parameter><key>expression</key><value>(?i)(?&lt;!--.*)\bTIMESTAMP(_NTZ|_LTZ)?(\s*\(\s*\d+\s*\))?\b</value></parameter></parameters></rule><rule><repositoryKey>txt</repositoryKey><key>Schema_names__prefix__RAW____REF___CON___AGG___DP___DM__</key><type>CODE_SMELL</type><priority>MAJOR</priority><impacts><impact><softwareQuality>MAINTAINABILITY</softwareQuality><severity>MEDIUM</severity></impact></impacts><name>Schema names must have a prefix (RAW_ | REF_| CON_| AGG_| DP_| DM_)</name><templateKey>SimpleRegexMatchCheck</templateKey><description>*Description:*
To ensure consistency and maintainability across the data platform, all schema names must begin with one of the following standardized prefixes:
* RAW_ – Raw data layer
* REF_ – Reference data
* CON_ – Conformed data
* AGG_ – Aggregated data
* DP_ – Data preparation
* DM_ – Data marts

This rule applies to all CREATE SCHEMA statements. Schema names that do not follow this convention can lead to misclassification of data and confusion across teams. Enforcing this naming convention improves readability, traceability, and data lifecycle management.</description><cleanCodeAttribute>CONVENTIONAL</cleanCodeAttribute><parameters><parameter><key>expression</key><value>(?i)^(?!\s*--)\s*CREATE\s+(OR\s+REPLACE\s+)?SCHEMA\s+(IF\s+NOT\s+EXISTS\s+)?(?:[a-z0-9_]+\.)?(?!RAW_|REF_|CON_|AGG_|DP_|DM_)[a-z0-9_]+;</value></parameter></parameters></rule><rule><repositoryKey>txt</repositoryKey><key>Table_names_must_begin_with_a_3_character_alphanumeric_component_code_followed_by_an_underscore</key><type>CODE_SMELL</type><priority>MAJOR</priority><impacts><impact><softwareQuality>MAINTAINABILITY</softwareQuality><severity>MEDIUM</severity></impact></impacts><name>(dynamic) Table names must begin with a 3-character alphanumeric component code followed by an underscore</name><templateKey>SimpleRegexMatchCheck</templateKey><description>*Description:*
All table names must follow the naming convention of a three-character sub-component code (letters A–Z or digits 0–9), followed by an underscore _, and then a descriptive name. This promotes consistency, discoverability, and easier identification of owning components.

*Examples:*
* IOT_SENSOR_DATA
* SENSOR_DATA</description><cleanCodeAttribute>CONVENTIONAL</cleanCodeAttribute><parameters><parameter><key>expression</key><value>(?i)^(?!\s*--)(?:\s*create(?:\s+or\s+replace)?|\s*alter)\s+(dynamic\s+)?table\s+(if\s+not\s+exists\s+)?(?:[A-Z0-9_]+\.){0,2}(?![A-Z0-9]{3}_)[A-Z_][A-Z0-9_]*</value></parameter></parameters></rule></rules></profile>